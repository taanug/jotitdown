import { useState } from "react";
import { type NextPage } from "next";
import Head from "next/head";
import { useSession } from "next-auth/react";

import { api, type RouterOutputs } from "../utils/api";
import Header from "../components/Header";
import { NoteEditor } from "../components/NoteEditor";
import { NoteCard } from "~/components/NoteCard";
import TopicList from "~/components/TopicList";

const Home: NextPage = () => {
  const { data: sessionData } = useSession();

  return (
    <>
      <Head>
        <title>Notetaker</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main>
        <Header />
        {sessionData?.user.id ? (
          <Content />
        ) : (
          <div className="flex h-screen">
            <div className="m-auto">Please login to jot it down</div>
          </div>
        )}
      </main>
    </>
  );
};

export default Home;

type Topic = RouterOutputs["topic"]["getAll"][0];
type Note = RouterOutputs["note"]["getAll"][0];

const Content: React.FC = () => {
  const { data: sessionData } = useSession();

  const [selectedTopic, setSelectedTopic] = useState<Topic | null>(null);

  const { data: topics, refetch: refetchTopics } = api.topic.getAll.useQuery(
    undefined, // no input
    {
      enabled: sessionData?.user !== undefined,
      onSuccess: (data) => {
        console.log("topic", data[0], selectedTopic);
        setSelectedTopic(data[0] ?? null);
      },
    }
  );

  const { data: notes, refetch: refetchNotes } = api.note.getAll.useQuery(
    {
      topicId: selectedTopic?.id ?? "",
    },
    {
      enabled: sessionData?.user !== undefined && selectedTopic !== null,
    }
  );

  const createNote = api.note.create.useMutation({
    onSuccess: () => {
      void refetchNotes();
    },
  });

  const deleteNote = api.note.delete.useMutation({
    onSuccess: () => {
      void refetchNotes();
    },
  });

  const onCreateTopic = (topic: string) => {
    const createTopic = api.topic.create.useMutation({
      onSuccess: (topic) => {
        void refetchTopics();
        setSelectedTopic(topic);
      },
    });
    createTopic.mutate({
      title: topic,
    });
  };

  const onDeleteTopic = (topicId: string) => {
    const deleteTopic = api.topic.delete.useMutation({
      onSuccess: () => {
        void refetchTopics();
        void refetchNotes();
      },
    });
    void deleteTopic.mutate({ id: topicId });
  };

  const updateNote = api.note.update.useMutation({
    onSuccess: () => {
      void refetchNotes();
    },
  });

  return (
    <div className="mx-5 mt-5 grid gap-2 sm:grid-rows-2 lg:grid-cols-4">
      <div className="colspan-1 px-2">
        <TopicList
          topics={topics}
          selectedTopic={selectedTopic}
          setSelectedTopic={setSelectedTopic}
          onCreateTopic={onCreateTopic}
          onDeleteTopic={onDeleteTopic}
        />
      </div>
      <div className="col-span-3">
        {notes?.map((note) => (
          <div key={note.id} className="mt-5 first:mt-2">
            <NoteCard
              note={note}
              onDelete={function (): void {
                void deleteNote.mutate({ id: note.id });
              }}
              onUpdate={function (title: string, content: string): void {
                void updateNote.mutate({ id: note.id, title, content });
              }}
            />
          </div>
        ))}
        {topics && topics[0] && selectedTopic ? (
          <NoteEditor
            topicTitle={selectedTopic.title}
            onSave={({ title, content }) => {
              void createNote.mutate({
                title,
                content,
                topicId: selectedTopic?.id ?? "",
              });
            }}
          />
        ) : (
          <div className="mt-5">Add a topic to create a note</div>
        )}
      </div>
    </div>
  );
};
