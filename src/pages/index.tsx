import { useState } from "react";
import { type NextPage } from "next";
import Head from "next/head";
import { useSession } from "next-auth/react";

import { api, type RouterOutputs } from "../utils/api";
import Header from "../components/Header";
import { NoteEditor } from "../components/NoteEditor";
import { NoteCard } from "~/components/NoteCard";

const Home: NextPage = () => {
  const { data: sessionData } = useSession();

  return (
    <>
      <Head>
        <title>Notetaker</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main>
        <Header />
        {sessionData?.user.id ? (
          <Content />
        ) : (
          <div className="flex h-screen">
            <div className="m-auto">Please login</div>
          </div>
        )}
      </main>
    </>
  );
};

export default Home;

type Topic = RouterOutputs["topic"]["getAll"][0];

const Content: React.FC = () => {
  const { data: sessionData } = useSession();

  const [selectedTopic, setSelectedTopic] = useState<Topic | null>(null);
  const [showDeleteAlert, setShowDeleteAlert] = useState(false);
  const [pendingDeleteNoteId, setPendingDeleteNoteId] = useState("");

  const { data: topics, refetch: refetchTopics } = api.topic.getAll.useQuery(
    undefined, // no input
    {
      enabled: sessionData?.user !== undefined,
      onSuccess: (data) => {
        setSelectedTopic(selectedTopic ?? data[0] ?? null);
      },
    }
  );

  const createTopic = api.topic.create.useMutation({
    onSuccess: (topic) => {
      void refetchTopics();
      setSelectedTopic(topic);
    },
  });

  const { data: notes, refetch: refetchNotes } = api.note.getAll.useQuery(
    {
      topicId: selectedTopic?.id ?? "",
    },
    {
      enabled: sessionData?.user !== undefined && selectedTopic !== null,
    }
  );

  const createNote = api.note.create.useMutation({
    onSuccess: () => {
      void refetchNotes();
    },
  });

  const deleteNote = (id: string) => {
    setPendingDeleteNoteId(id);
    setShowDeleteAlert(true);
  };

  const deleteNoteAccepted = api.note.delete.useMutation({
    onSuccess: () => {
      setPendingDeleteNoteId("");
      void refetchNotes();
    },
  });

  return (
    <div className="mx-5 mt-5 grid gap-2 sm:grid-rows-2 lg:grid-cols-4">
      <div className="colspan-1 px-2">
        <ul className="menu rounded-box w-56 bg-base-100 p-2">
          {topics?.map((topic) => (
            <li key={topic.id}>
              <a
                className={`${topic.id === selectedTopic?.id ? "active" : ""}`}
                href="#"
                onClick={(evt) => {
                  evt.preventDefault();
                  setSelectedTopic(topic);
                }}
              >
                {topic.title}
              </a>
            </li>
          ))}
        </ul>
        <div className="divider"></div>
        <input
          type="text"
          placeholder="New Topic"
          className="input-bordered input input-sm w-full"
          onKeyDown={(e) => {
            if (e.key === "Enter") {
              createTopic.mutate({
                title: e.currentTarget.value,
              });
              e.currentTarget.value = "";
            }
          }}
        />
      </div>
      <div className="col-span-3">
        {notes?.map((note) => (
          <div key={note.id} className="mt-5">
            <NoteCard
              note={note}
              onDelete={function (): void {
                void deleteNote(note.id);
              }}
            />
            {showDeleteAlert && pendingDeleteNoteId === note.id ? (
              <div className="alert alert-warning shadow-lg">
                <div>
                  <svg
                    xmlns="http://www.w3.org/2000/svg"
                    fill="none"
                    viewBox="0 0 24 24"
                    className="h-6 w-6 flex-shrink-0 stroke-info"
                  >
                    <path
                      strokeLinecap="round"
                      strokeLinejoin="round"
                      strokeWidth="2"
                      d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"
                    ></path>
                  </svg>
                  <span>Are you sure you want to Delete this note?</span>
                </div>
                <div className="flex-none">
                  <button
                    className="btn-ghost btn-sm btn"
                    onClick={() => setShowDeleteAlert(!showDeleteAlert)}
                  >
                    Deny
                  </button>
                  <button
                    className="btn-primary btn-sm btn"
                    onClick={() => {
                      setShowDeleteAlert(!showDeleteAlert);
                      deleteNoteAccepted.mutate({ id: pendingDeleteNoteId });
                    }}
                  >
                    Accept
                  </button>
                </div>
              </div>
            ) : null}
          </div>
        ))}

        <NoteEditor
          onSave={({ title, content }) => {
            void createNote.mutate({
              title,
              content,
              topicId: selectedTopic?.id ?? "",
            });
          }}
        />
      </div>
    </div>
  );
};
